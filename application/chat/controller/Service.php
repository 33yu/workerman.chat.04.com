<?php
/**
 * Created by IntelliJ IDEA.
 * User: li914
 * Date: 18-8-13
 * Time: 上午10:00
 */

namespace app\chat\controller;


use GatewayClient\Gateway;
use think\Controller;
use think\facade\Request;
use think\Route;


class Service extends Controller
{
    protected $success,$fail;
    private $accessKeyId;
    private $accessKeyIdSecret;
    protected function initialize()
    {
        parent::initialize(); // TODO: Change the autogenerated stub
        $this->success=config('success');
        $this->fail=config('fail');
        $this->accessKeyId='LTAIYMxCyekTsSkx';
        $this->accessKeyIdSecret='nvRouYs1cjYVYhAFWYMLEb0IKUTUnO';
    }

    //名称和uid进行绑定
    public function bindUid(){
        if (!Request::isAjax()){
            $this->fail['msg']='该请求方式不正确!';
            return $this->fail;
        }
        $data=Request::post();
        if ($data['type']!='bind'){
            $this->fail['msg']='该请求参数不正确!';
            return $this->fail;
        }
        $client_id=$data['client_id'];
        $client_name=nl2br(htmlspecialchars($data['client_name']));
        $room_id=$data['room_id'];
        Gateway::bindUid($client_id,$client_name);
        if (!Gateway::isUidOnline($client_name)){
            $this->fail['msg']='对不起,未绑定成功!';
            return $this->fail;
        }
        Gateway::joinGroup($client_id,$room_id);
        Gateway::sendToGroup($room_id,'{"type":"join","client_name":"'.$client_name.'","time":"'.date('H:i:s').'"}');
        Gateway::setSession($client_id,array('room_id'=>$room_id,'client_name'=>$client_name));
        $client_list=Gateway::getClientSessionsByGroup($room_id);
        $list=array('type'=>'client_list','time'=>date('H:i:s'),'list'=>$client_list);
        try{
            Gateway::sendToGroup($room_id,json_encode($list,true));
        }catch (\Exception $e){
//            Gateway::sendToGroup($room_id,json_encode($list,true));
        }
        $this->success['msg']='绑定成功,并且加入房间';
        $this->success['result']=$client_list;
        return $this->success;
    }
    //发送群组信息
    public function sendGroupMsg(){
        if (!Request::isAjax()){
            $this->fail['msg']='该请求方式不正确!';
            return $this->fail;
        }
        $data=Request::post();
        if ($data['type']!='say'){
            $this->fail['msg']='该请求参数不正确!';
            return $this->fail;
        }
        $to_client_id=$data['to_client_id'];
        $to_client_name=$data['to_client_name'];
        $form_client_id=$data['form_client_id'];
        $form_client_name=$data['form_client_name'];
        $content=$data['content'];
        $room_id=$data['room_id'];
        $form_client_header=$data['form_client_header'];
        $time=$data['time'];
        $msg_type=$data['msg_type'];
        $msg='{"type":"say","form_client_id":"'.$form_client_id.'","form_client_name":"' .$form_client_name.'","form_client_header":"'.$form_client_header.
            '","content":"'.$content.'","to_client_id":"'.$to_client_id.'","to_client_name":"'.$to_client_name.'","time":"'.$time.'",'.'"msg_type":"'.$msg_type.'"}';
        try{
            Gateway::sendToGroup($room_id,$msg,array($form_client_id));
        }catch (\Exception $e){
            var_dump($e);
        }
        $this->success['result']=$data;
        return $this->success;
    }
    //发送私聊信息
    public function sendPrivateMsg(){
        if (!Request::isAjax()){
            $this->fail['msg']='该请求方式不正确!';
            return $this->fail;
        }
        $data=Request::post();
        if ($data['type']!='say'){
            $this->fail['msg']='该请求参数不正确!';
            return $this->fail;
        }
        $to_client_id=$data['to_client_id'];
        $to_client_name=$data['to_client_name'];
        $form_client_id=$data['form_client_id'];
        $form_client_name=$data['form_client_name'];
        $form_client_header=$data['form_client_header'];
        $content=$data['content'];
        $room_id=$data['room_id'];
        $time=$data['time'];
        $msg_type=$data['msg_type'];
        $msg='{"type":"say","content":"'.$content.'","form_client_name":"'.$form_client_name.'","form_client_id":"' .$form_client_id.'","form_client_header":"'.$form_client_header.
            '","to_client_id":"'.$to_client_id.'","to_client_name":"'.$to_client_name.'","time":"'.$time.'"'.',"msg_type":"'.$msg_type.'"}';
        Gateway::sendToUid($to_client_name,$msg);
        $this->success['result']=$data;
        return $this->success;
    }
    //通知离开群组信息
    public function leaveGroupMsg(){
        if (!Request::isAjax()){
            $this->fail['msg']='该请求方式不正确!';
            return $this->fail;
        }
        $data=Request::post();
        if ($data['type']!='leave'){
            $this->fail['msg']='该请求参数不正确!';
            return $this->fail;
        }
        $client_name=$data['client_name'];
        $time=$data['time'];
        $room_id=$data['room_id'];
        $msg='{"type":"leave","client_name":"'.$client_name.'","time":"'.$time.'"}';
        try {
            Gateway::sendToGroup($room_id, $msg);
        } catch (\Exception $e) {
        }
        $this->success['result']=$data;
        return $this->success;
    }


    public function encryOss(){
        $id= 'LTAIBEXUEO1oBRH9';          // 请填写您的AccessKeyId。
        $key= 'XCvADuRXVYDZmEAGevzV8J8n4NVGwP';     // 请填写您的AccessKeySecret。
        // $host的格式为 bucketname.endpoint，请替换为您的真实信息。
//        $host = 'https://li914.oss-cn-hangzhou.aliyuncs.com';//liang914.oss-cn-hangzhou.aliyuncs.com
        $host = 'https://liang914.oss-cn-hangzhou.aliyuncs.com';//liang914.oss-cn-hangzhou.aliyuncs.com
        $dir = 'chat/tmp/';          // 用户上传文件时指定的前缀。

        $now = time();
        $expire = 30;  //设置该policy超时时间是10s. 即这个policy过了这个有效时间，将不能访问。
        $end = $now + $expire;
        $expiration = gmt_iso8601($end);


        //最大文件大小.用户可以自己设置
        $condition = array(0=>'content-length-range', 1=>0, 2=>2097152);
        $conditions[] = $condition;

        // 表示用户上传的数据，必须是以$dir开始，不然上传会失败，这一步不是必须项，只是为了安全起见，防止用户通过policy上传到别人的目录。
        $start = array(0=>'starts-with', 1=>'$key', 2=>$dir);
        $conditions[] = $start;


        $arr = array('expiration'=>$expiration,'conditions'=>$conditions);
        $policy = json_encode($arr);
        $base64_policy = base64_encode($policy);
        $string_to_sign = $base64_policy;
        $signature = base64_encode(hash_hmac('sha1', $string_to_sign, $key, true));

        $res=$this->success;
        $res['data']['accessid']=$id;
        $res['data']['host']=$host;
        $res['data']['policy']=$base64_policy;
        $res['data']['signature']=$signature;
        $res['data']['expire']=$end;
        $res['data']['dir']=$dir;
        return json($res);
    }
}